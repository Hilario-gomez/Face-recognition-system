# -*- coding: utf-8 -*-
"""facial recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cgHCl2qeIykggfx9rIcSfJqRRxsjOruk
"""

pip install mtcnn

from PIL import Image
import numpy as np
from mtcnn.mtcnn import MTCNN
from os import listdir
from matplotlib import pyplot
from os.path import isdir

def extract_face(filename, required_size=(160,160)):
  image = Image.open(filename)
  image = image.convert('RGB')
  pixels = np.asarray(image)
  detector = MTCNN()
  results = detector.detect_faces(pixels)
  #extracting bounding boxes from face
  x1 ,y1 ,width, height = results[0]['box']
  #bug fix
  x1, y1 = abs(x1), abs(y1)
  x2 ,y2 = x1 + width, y1 + height

  face = pixels[y1:y2, x1:x2]
  image = Image.fromarray(face)
  image = image.resize(required_size)
  face_array = np.asarray(image)
  return face_array

from google.colab import drive
drive.mount('/content/drive')
folder = '/content/drive/My Drive/5-celebrity-faces-dataset/train/ben_afflek/'
i = 1
for filename in listdir(folder):
  path = folder + filename
  face = extract_face(path)
  print(i, face.shape)
  pyplot.subplot(2, 7, i)
  pyplot.axis('off')
  pyplot.imshow(face)
  i += 1
pyplot.show

#load images and extract faces for all images in a directory
def load_faces(directory):
  faces = list()
  for filename in listdir(directory):
    path = directory + filename
    #getface
    face = extract_face(path)
    #store faces
    faces.append(face)
  return faces

#load a dataset that contains one subdir for each class that in turn contains images
def load_dataset(directory):
  x, y = list(),list()
  for subdir in listdir(directory):
    path = directory + subdir + '/'
    #skip any files that migt be in the dir
    if not isdir(path):
      continue
    faces = load_faces(path)
    labels = [subdir for _ in range(len(faces))]
    print('>loaded %d examples for class: %s'%(len(faces), subdir))
    x.extend(faces)
    y.extend(labels)
  return np.asarray(x), np.asarray(y)

#load train dataset
trainx , trainy = load_dataset('/content/drive/My Drive/5-celebrity-faces-dataset/train/')
print(trainx.shape, trainy.shape)
#load test dataset
testx , testy = load_dataset('/content/drive/My Drive/5-celebrity-faces-dataset/val/')
print(testx.shape, testy.shape)
#save arrays to one file in compressed format
np.savez_compressed('5-celebrity-dataset.npz', trainx, trainy, testx, testy)

#face embedding
from keras.models import load_model

def get_embedding(model, face_pixels):
  face_pixels = face_pixels.astype('float32')
  mean, std = face_pixels.mean(), face_pixels.std()
  face_pixels = (face_pixels - mean)/std
  samples = np.expand_dims(face_pixels, axis = 0)
  yhat = model.predict(samples)
  return yhat[0]

#load the face dataset
data = np.load('5-celebrity-dataset.npz')
trainx, trainy, testx, testy = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3']
print('Loaded: ', trainx.shape, trainy.shape, testx.shape, testy.shape)

#load facenet model
model = load_model('/content/drive/My Drive/keras-facenet.h5/model/facenet_keras.h5')
print('Loaded Model')

#convert each face in the train set to an embedding
newtrainx = list()
for face_pixels in trainx:
  embedding = get_embedding(model, face_pixels)
  newtrainx.append(embedding)
newtrainx = np.asarray(newtrainx)
print(newtrainx.shape)

#convert each face in the test set to an embedding
newtestx = list()
for face_pixels in testx:
  embedding = get_embedding(model, face_pixels)
  newtestx.append(embedding)
newtestx = np.asarray(newtestx)
print(newtestx.shape)

from numpy.lib.npyio import savez_compressed
savez_compressed('5-celebrity-faces-embeddings.npz', newtrainx, trainy, newtestx, testy)

from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import Normalizer
from sklearn.svm import SVC

#load face embeddings
data = np.load('5-celebrity-faces-embeddings.npz')
trainx, trainy, testx, testy = data['arr_0'], data['arr_1'], data['arr_2'], data['arr_3']
print('Dataset: train=%d, test=%d'%(trainx.shape[0],testx.shape[0]))

#normalize vectors
in_encoder = Normalizer(norm="l2")
trainx = in_encoder.transform(trainx)
testx = in_encoder.transform(testx)

#string target variables for each name converted to integers
out_encoder = LabelEncoder()
out_encoder.fit(trainy)
trainy = out_encoder.transform(trainy)
testy = out_encoder.transform(testy)

#fit model
model = SVC(kernel = 'linear')
model.fit(trainx, trainy)

#evaluating of the model

#predict
yhat_train = model.predict(trainx)
yhat_test = model.predict(testx)
#score
score_train = accuracy_score(trainy, yhat_train)
score_test = accuracy_score(testy, yhat_test)
print('Accuracy: train=%.3f, test=%.3f'%(score_train*100,score_test*100))

from random import choice
from matplotlib import pyplot
#plotting the original face and the prediction

#load faces
data = np.load('5-celebrity-dataset.npz')
testx_faces = data['arr_2']
#load face embeddings
data = np.load('5-celebrity-faces-embeddings.npz')
trainx, trainy, testx, testy = data['arr_0'],data['arr_1'],data['arr_2'],data['arr_3']
#normalize input vectors
in_encoder = Normalizer(norm='l2')
trainx = in_encoder.transform(trainx)
testx = in_encoder.transform(testx)

#label encode targets
out_encoder = LabelEncoder()
out_encoder.fit(trainy)
trainy = out_encoder.transform(trainy)
testy = out_encoder.transform(testy)
#fit model
model = SVC(kernel = 'linear', probability=True)
model.fit(trainx, trainy)

#random example is selected then embedding, face pixels, expected class prediction and corresponding name for the class got
selection = choice([i for i in range(testx.shape[0])])
random_face_pixels = testx_faces[selection]
random_face_emb = testx[selection]
random_face_class = testy[selection]
random_face_name = out_encoder.inverse_transform([random_face_class])

#predict face
samples = np.expand_dims(random_face_emb, axis=0)
yhat_class = model.predict(samples)
yhat_prob = model.predict(samples)

#get name
class_index = yhat_class[0]class_probability = yhat_prob[0, class_index]*100
predict_names = out_encoder.inverse_transform(yhat_class)
print('Predicted:%s (%3f'%(predict_names[0],class_probability))
print('Expected:%s'%random_face_name[0])

pyplot.imshow(random_face_pixels)
title = '%s(%.3f)'%(predict_names[0],class_probability)
pyplot.title(title)
pyplot.show